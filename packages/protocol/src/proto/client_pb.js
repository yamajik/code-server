/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var node_pb = require('./node_pb.js');
var vscode_pb = require('./vscode_pb.js');
goog.exportSymbol('proto.ClientMessage', null, global);
goog.exportSymbol('proto.ServerMessage', null, global);
goog.exportSymbol('proto.WorkingInitMessage', null, global);
goog.exportSymbol('proto.WorkingInitMessage.OperatingSystem', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientMessage.oneofGroups_);
};
goog.inherits(proto.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientMessage.displayName = 'proto.ClientMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientMessage.oneofGroups_ = [[20,21]];

/**
 * @enum {number}
 */
proto.ClientMessage.MsgCase = {
  MSG_NOT_SET: 0,
  METHOD: 20,
  PING: 21
};

/**
 * @return {proto.ClientMessage.MsgCase}
 */
proto.ClientMessage.prototype.getMsgCase = function() {
  return /** @type {proto.ClientMessage.MsgCase} */(jspb.Message.computeOneofCase(this, proto.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: (f = msg.getMethod()) && node_pb.MethodMessage.toObject(includeInstance, f),
    ping: (f = msg.getPing()) && node_pb.Ping.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientMessage}
 */
proto.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientMessage;
  return proto.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientMessage}
 */
proto.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 20:
      var value = new node_pb.MethodMessage;
      reader.readMessage(value,node_pb.MethodMessage.deserializeBinaryFromReader);
      msg.setMethod(value);
      break;
    case 21:
      var value = new node_pb.Ping;
      reader.readMessage(value,node_pb.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      node_pb.MethodMessage.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      node_pb.Ping.serializeBinaryToWriter
    );
  }
};


/**
 * optional MethodMessage method = 20;
 * @return {?proto.MethodMessage}
 */
proto.ClientMessage.prototype.getMethod = function() {
  return /** @type{?proto.MethodMessage} */ (
    jspb.Message.getWrapperField(this, node_pb.MethodMessage, 20));
};


/** @param {?proto.MethodMessage|undefined} value */
proto.ClientMessage.prototype.setMethod = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.ClientMessage.oneofGroups_[0], value);
};


proto.ClientMessage.prototype.clearMethod = function() {
  this.setMethod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientMessage.prototype.hasMethod = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Ping ping = 21;
 * @return {?proto.Ping}
 */
proto.ClientMessage.prototype.getPing = function() {
  return /** @type{?proto.Ping} */ (
    jspb.Message.getWrapperField(this, node_pb.Ping, 21));
};


/** @param {?proto.Ping|undefined} value */
proto.ClientMessage.prototype.setPing = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.ClientMessage.oneofGroups_[0], value);
};


proto.ClientMessage.prototype.clearPing = function() {
  this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientMessage.prototype.hasPing = function() {
  return jspb.Message.getField(this, 21) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerMessage.oneofGroups_);
};
goog.inherits(proto.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerMessage.displayName = 'proto.ServerMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerMessage.oneofGroups_ = [[13,14,19,22,18,16,17]];

/**
 * @enum {number}
 */
proto.ServerMessage.MsgCase = {
  MSG_NOT_SET: 0,
  FAIL: 13,
  SUCCESS: 14,
  EVENT: 19,
  CALLBACK: 22,
  PONG: 18,
  INIT: 16,
  SHARED_PROCESS_ACTIVE: 17
};

/**
 * @return {proto.ServerMessage.MsgCase}
 */
proto.ServerMessage.prototype.getMsgCase = function() {
  return /** @type {proto.ServerMessage.MsgCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    fail: (f = msg.getFail()) && node_pb.FailMessage.toObject(includeInstance, f),
    success: (f = msg.getSuccess()) && node_pb.SuccessMessage.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && node_pb.EventMessage.toObject(includeInstance, f),
    callback: (f = msg.getCallback()) && node_pb.CallbackMessage.toObject(includeInstance, f),
    pong: (f = msg.getPong()) && node_pb.Pong.toObject(includeInstance, f),
    init: (f = msg.getInit()) && proto.WorkingInitMessage.toObject(includeInstance, f),
    sharedProcessActive: (f = msg.getSharedProcessActive()) && vscode_pb.SharedProcessActiveMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage}
 */
proto.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage;
  return proto.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage}
 */
proto.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 13:
      var value = new node_pb.FailMessage;
      reader.readMessage(value,node_pb.FailMessage.deserializeBinaryFromReader);
      msg.setFail(value);
      break;
    case 14:
      var value = new node_pb.SuccessMessage;
      reader.readMessage(value,node_pb.SuccessMessage.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 19:
      var value = new node_pb.EventMessage;
      reader.readMessage(value,node_pb.EventMessage.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 22:
      var value = new node_pb.CallbackMessage;
      reader.readMessage(value,node_pb.CallbackMessage.deserializeBinaryFromReader);
      msg.setCallback(value);
      break;
    case 18:
      var value = new node_pb.Pong;
      reader.readMessage(value,node_pb.Pong.deserializeBinaryFromReader);
      msg.setPong(value);
      break;
    case 16:
      var value = new proto.WorkingInitMessage;
      reader.readMessage(value,proto.WorkingInitMessage.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 17:
      var value = new vscode_pb.SharedProcessActiveMessage;
      reader.readMessage(value,vscode_pb.SharedProcessActiveMessage.deserializeBinaryFromReader);
      msg.setSharedProcessActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFail();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      node_pb.FailMessage.serializeBinaryToWriter
    );
  }
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      node_pb.SuccessMessage.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      node_pb.EventMessage.serializeBinaryToWriter
    );
  }
  f = message.getCallback();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      node_pb.CallbackMessage.serializeBinaryToWriter
    );
  }
  f = message.getPong();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      node_pb.Pong.serializeBinaryToWriter
    );
  }
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.WorkingInitMessage.serializeBinaryToWriter
    );
  }
  f = message.getSharedProcessActive();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      vscode_pb.SharedProcessActiveMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional FailMessage fail = 13;
 * @return {?proto.FailMessage}
 */
proto.ServerMessage.prototype.getFail = function() {
  return /** @type{?proto.FailMessage} */ (
    jspb.Message.getWrapperField(this, node_pb.FailMessage, 13));
};


/** @param {?proto.FailMessage|undefined} value */
proto.ServerMessage.prototype.setFail = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.ServerMessage.oneofGroups_[0], value);
};


proto.ServerMessage.prototype.clearFail = function() {
  this.setFail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerMessage.prototype.hasFail = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SuccessMessage success = 14;
 * @return {?proto.SuccessMessage}
 */
proto.ServerMessage.prototype.getSuccess = function() {
  return /** @type{?proto.SuccessMessage} */ (
    jspb.Message.getWrapperField(this, node_pb.SuccessMessage, 14));
};


/** @param {?proto.SuccessMessage|undefined} value */
proto.ServerMessage.prototype.setSuccess = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.ServerMessage.oneofGroups_[0], value);
};


proto.ServerMessage.prototype.clearSuccess = function() {
  this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerMessage.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional EventMessage event = 19;
 * @return {?proto.EventMessage}
 */
proto.ServerMessage.prototype.getEvent = function() {
  return /** @type{?proto.EventMessage} */ (
    jspb.Message.getWrapperField(this, node_pb.EventMessage, 19));
};


/** @param {?proto.EventMessage|undefined} value */
proto.ServerMessage.prototype.setEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.ServerMessage.oneofGroups_[0], value);
};


proto.ServerMessage.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerMessage.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional CallbackMessage callback = 22;
 * @return {?proto.CallbackMessage}
 */
proto.ServerMessage.prototype.getCallback = function() {
  return /** @type{?proto.CallbackMessage} */ (
    jspb.Message.getWrapperField(this, node_pb.CallbackMessage, 22));
};


/** @param {?proto.CallbackMessage|undefined} value */
proto.ServerMessage.prototype.setCallback = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.ServerMessage.oneofGroups_[0], value);
};


proto.ServerMessage.prototype.clearCallback = function() {
  this.setCallback(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerMessage.prototype.hasCallback = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional Pong pong = 18;
 * @return {?proto.Pong}
 */
proto.ServerMessage.prototype.getPong = function() {
  return /** @type{?proto.Pong} */ (
    jspb.Message.getWrapperField(this, node_pb.Pong, 18));
};


/** @param {?proto.Pong|undefined} value */
proto.ServerMessage.prototype.setPong = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.ServerMessage.oneofGroups_[0], value);
};


proto.ServerMessage.prototype.clearPong = function() {
  this.setPong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerMessage.prototype.hasPong = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional WorkingInitMessage init = 16;
 * @return {?proto.WorkingInitMessage}
 */
proto.ServerMessage.prototype.getInit = function() {
  return /** @type{?proto.WorkingInitMessage} */ (
    jspb.Message.getWrapperField(this, proto.WorkingInitMessage, 16));
};


/** @param {?proto.WorkingInitMessage|undefined} value */
proto.ServerMessage.prototype.setInit = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.ServerMessage.oneofGroups_[0], value);
};


proto.ServerMessage.prototype.clearInit = function() {
  this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerMessage.prototype.hasInit = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SharedProcessActiveMessage shared_process_active = 17;
 * @return {?proto.SharedProcessActiveMessage}
 */
proto.ServerMessage.prototype.getSharedProcessActive = function() {
  return /** @type{?proto.SharedProcessActiveMessage} */ (
    jspb.Message.getWrapperField(this, vscode_pb.SharedProcessActiveMessage, 17));
};


/** @param {?proto.SharedProcessActiveMessage|undefined} value */
proto.ServerMessage.prototype.setSharedProcessActive = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.ServerMessage.oneofGroups_[0], value);
};


proto.ServerMessage.prototype.clearSharedProcessActive = function() {
  this.setSharedProcessActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerMessage.prototype.hasSharedProcessActive = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WorkingInitMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WorkingInitMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WorkingInitMessage.displayName = 'proto.WorkingInitMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WorkingInitMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.WorkingInitMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WorkingInitMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WorkingInitMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    homeDirectory: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tmpDirectory: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataDirectory: jspb.Message.getFieldWithDefault(msg, 3, ""),
    workingDirectory: jspb.Message.getFieldWithDefault(msg, 4, ""),
    operatingSystem: jspb.Message.getFieldWithDefault(msg, 5, 0),
    shell: jspb.Message.getFieldWithDefault(msg, 6, ""),
    builtinExtensionsDir: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WorkingInitMessage}
 */
proto.WorkingInitMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WorkingInitMessage;
  return proto.WorkingInitMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WorkingInitMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WorkingInitMessage}
 */
proto.WorkingInitMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomeDirectory(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTmpDirectory(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataDirectory(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkingDirectory(value);
      break;
    case 5:
      var value = /** @type {!proto.WorkingInitMessage.OperatingSystem} */ (reader.readEnum());
      msg.setOperatingSystem(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setShell(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuiltinExtensionsDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WorkingInitMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WorkingInitMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WorkingInitMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WorkingInitMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHomeDirectory();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTmpDirectory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataDirectory();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWorkingDirectory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOperatingSystem();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getShell();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBuiltinExtensionsDir();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.WorkingInitMessage.OperatingSystem = {
  WINDOWS: 0,
  LINUX: 1,
  MAC: 2
};

/**
 * optional string home_directory = 1;
 * @return {string}
 */
proto.WorkingInitMessage.prototype.getHomeDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WorkingInitMessage.prototype.setHomeDirectory = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tmp_directory = 2;
 * @return {string}
 */
proto.WorkingInitMessage.prototype.getTmpDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.WorkingInitMessage.prototype.setTmpDirectory = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string data_directory = 3;
 * @return {string}
 */
proto.WorkingInitMessage.prototype.getDataDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.WorkingInitMessage.prototype.setDataDirectory = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string working_directory = 4;
 * @return {string}
 */
proto.WorkingInitMessage.prototype.getWorkingDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.WorkingInitMessage.prototype.setWorkingDirectory = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional OperatingSystem operating_system = 5;
 * @return {!proto.WorkingInitMessage.OperatingSystem}
 */
proto.WorkingInitMessage.prototype.getOperatingSystem = function() {
  return /** @type {!proto.WorkingInitMessage.OperatingSystem} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.WorkingInitMessage.OperatingSystem} value */
proto.WorkingInitMessage.prototype.setOperatingSystem = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string shell = 6;
 * @return {string}
 */
proto.WorkingInitMessage.prototype.getShell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.WorkingInitMessage.prototype.setShell = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string builtin_extensions_dir = 7;
 * @return {string}
 */
proto.WorkingInitMessage.prototype.getBuiltinExtensionsDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.WorkingInitMessage.prototype.setBuiltinExtensionsDir = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


goog.object.extend(exports, proto);
